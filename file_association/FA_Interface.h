/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp fileassociation_necessaries.xml -p FA_Interface
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FA_INTERFACE_H
#define FA_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface file.association
 */
class FileAssociationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "file.association"; }

public:
    FileAssociationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~FileAssociationInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addService(const QString &service_domain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain);
        return asyncCallWithArgumentList(QStringLiteral("addService"), argumentList);
    }

    inline QDBusPendingReply<> addType(const QString &service_domain, const QString &type_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain) << QVariant::fromValue(type_name);
        return asyncCallWithArgumentList(QStringLiteral("addType"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getServices"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getServicesByType(const QString &type_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type_name);
        return asyncCallWithArgumentList(QStringLiteral("getServicesByType"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getTypes(const QString &service_domain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain);
        return asyncCallWithArgumentList(QStringLiteral("getTypes"), argumentList);
    }

    inline QDBusPendingReply<> removeService(const QString &service_domain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain);
        return asyncCallWithArgumentList(QStringLiteral("removeService"), argumentList);
    }

    inline QDBusPendingReply<> removeType(const QString &service_domain, const QString &type_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain) << QVariant::fromValue(type_name);
        return asyncCallWithArgumentList(QStringLiteral("removeType"), argumentList);
    }

    inline QDBusPendingReply<bool> serviceExist(const QString &service_domain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service_domain);
        return asyncCallWithArgumentList(QStringLiteral("serviceExist"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void GotTypes(const QString &service_domain);
    void ServiceAdded(const QString &service_domain);
    void ServiceRemoved(const QString &service_domain);
    void TypeAdded(const QString &service_domain, const QString &type_name);
    void TypeRemoved(const QString &service_domain, const QString &type_name);
};

namespace file {
  typedef ::FileAssociationInterface association;
}
#endif
